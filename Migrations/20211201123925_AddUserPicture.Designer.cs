// <auto-generated />
using System;
using DESAFIO.MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DESAFIO.MVC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211201123925_AddUserPicture")]
    partial class AddUserPicture
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("DESAFIO.MVC.Models.Daily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Impediments")
                        .HasColumnType("longtext");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("Presence")
                        .HasColumnType("int");

                    b.Property<int>("StarterId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TasksDoing")
                        .HasColumnType("longtext");

                    b.Property<string>("TasksDone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("StarterId");

                    b.ToTable("Dailies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2021, 12, 1, 9, 39, 24, 614, DateTimeKind.Local).AddTicks(9227),
                            Impediments = "None",
                            ModuleId = 1,
                            Presence = 2,
                            StarterId = 1,
                            Status = true,
                            TasksDoing = "Authentication",
                            TasksDone = "CRUD"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2021, 12, 1, 9, 39, 24, 615, DateTimeKind.Local).AddTicks(1309),
                            Impediments = "None",
                            ModuleId = 1,
                            Presence = 2,
                            StarterId = 2,
                            Status = true,
                            TasksDoing = "Data seed",
                            TasksDone = "Authentication"
                        });
                });

            modelBuilder.Entity("DESAFIO.MVC.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ScrumMaster")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TechnologyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TechnologyId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ScrumMaster = "Luisinho",
                            Status = true,
                            TechnologyId = 1
                        },
                        new
                        {
                            Id = 2,
                            ScrumMaster = "Luisinho",
                            Status = true,
                            TechnologyId = 2
                        });
                });

            modelBuilder.Entity("DESAFIO.MVC.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "MVC",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Name = "API",
                            Status = true
                        });
                });

            modelBuilder.Entity("DESAFIO.MVC.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("Grade")
                        .HasColumnType("float");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("StarterId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("StarterId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Grade = 10f,
                            ModuleId = 1,
                            StarterId = 1,
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Grade = 9f,
                            ModuleId = 1,
                            StarterId = 2,
                            Status = true
                        });
                });

            modelBuilder.Entity("DESAFIO.MVC.Models.StartProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("StartPrograms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2021, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Turma 1",
                            StartDate = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2021, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Turma 2",
                            StartDate = new DateTime(2021, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true
                        });
                });

            modelBuilder.Entity("DESAFIO.MVC.Models.Starter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FourCharacters")
                        .HasColumnType("longtext");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("StartProgramId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StartProgramId");

                    b.ToTable("Starters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FourCharacters = "PAMM",
                            GroupId = 1,
                            ImageName = "IMG_20201112_130915.jpg",
                            Name = "Pucca",
                            StartProgramId = 1,
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            FourCharacters = "MIMM",
                            GroupId = 2,
                            ImageName = "IMG_20211116_162601.jpg",
                            Name = "Mochi",
                            StartProgramId = 1,
                            Status = true
                        });
                });

            modelBuilder.Entity("DESAFIO.MVC.Models.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Technologies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = ".NET with C# and Visual Studio Code",
                            Name = ".NET",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Description = "No description available",
                            Name = "Java",
                            Status = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "849bb501-93c9-4b32-a86a-265f5d27a1be",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90dfc649-8648-4500-92d7-5e9b3336e06a",
                            Email = "clecio.silva@gft.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "CLECIO.SILVA@GFT.COM",
                            NormalizedUserName = "CLECIO.SILVA@GFT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGAJkMMpaFpbllIcoSX1Ymx/DU+gN2EekAWm96lzrZKCOYQ5MhH9x1Z8SltqS9NdBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83784aac-231d-4349-ab48-802635733a52",
                            TwoFactorEnabled = false,
                            UserName = "clecio.silva@gft.com"
                        },
                        new
                        {
                            Id = "6eef2868-d9db-47a0-b23f-f512cf387390",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51248104-1591-4082-b0c1-5c0bcd858055",
                            Email = "zezinho@gft.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ZEZINHO@GFT.COM",
                            NormalizedUserName = "ZEZINHO@GFT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJcDc5RdQ5LgLHcj6u50sV11Jk2g4zE8DO+grFUuKWlDgEbKFO0y/foLzcBgrZKJ+Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3af93b65-0931-489c-a702-5f22da646ff8",
                            TwoFactorEnabled = false,
                            UserName = "zezinho@gft.com"
                        },
                        new
                        {
                            Id = "b21c526c-5931-4e6c-bac9-d6e8977034cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "946693d4-049d-4a28-ac7c-590b9e3cb562",
                            Email = "luisinho@gft.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "LUISINHO@GFT.COM",
                            NormalizedUserName = "LUISINHO@GFT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGSpVT4ePeykSGPvsGbJIX7W96jjX56JqaS93b6A8fSpBgTB8tMhqR/LL5mfLUqT3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7942f6a8-5042-4a8f-af9d-9fd1c55f96a2",
                            TwoFactorEnabled = false,
                            UserName = "luisinho@gft.com"
                        },
                        new
                        {
                            Id = "7a615f2c-dddc-4741-bc95-bf70ed616355",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4af22c01-84cb-49f4-8a15-e5e71765da83",
                            Email = "huguinho@gft.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "HUGUINHO@GFT.COM",
                            NormalizedUserName = "HUGUINHO@GFT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI1+gzmEaUv0s+3yqMUAX38JllArrq9DlUBI3G8Rb/KnSXDvmCfEUkmJCRQ6VH4ejw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f46cc96b-3126-41a8-bf6e-8f0016fc0e13",
                            TwoFactorEnabled = false,
                            UserName = "huguinho@gft.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "FullName",
                            ClaimValue = "Clécio Silva",
                            UserId = "849bb501-93c9-4b32-a86a-265f5d27a1be"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "UserRole",
                            ClaimValue = "admin",
                            UserId = "849bb501-93c9-4b32-a86a-265f5d27a1be"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "FullName",
                            ClaimValue = "Zezinho",
                            UserId = "6eef2868-d9db-47a0-b23f-f512cf387390"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "UserRole",
                            ClaimValue = "scrumMaster",
                            UserId = "6eef2868-d9db-47a0-b23f-f512cf387390"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "FullName",
                            ClaimValue = "Luisinho",
                            UserId = "b21c526c-5931-4e6c-bac9-d6e8977034cf"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "UserRole",
                            ClaimValue = "scrumMaster",
                            UserId = "b21c526c-5931-4e6c-bac9-d6e8977034cf"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "FullName",
                            ClaimValue = "Huguinho",
                            UserId = "7a615f2c-dddc-4741-bc95-bf70ed616355"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "UserRole",
                            ClaimValue = "scrumMaster",
                            UserId = "7a615f2c-dddc-4741-bc95-bf70ed616355"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DESAFIO.MVC.Models.Daily", b =>
                {
                    b.HasOne("DESAFIO.MVC.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DESAFIO.MVC.Models.Starter", "Starter")
                        .WithMany()
                        .HasForeignKey("StarterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Starter");
                });

            modelBuilder.Entity("DESAFIO.MVC.Models.Group", b =>
                {
                    b.HasOne("DESAFIO.MVC.Models.Technology", "Technology")
                        .WithMany()
                        .HasForeignKey("TechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("DESAFIO.MVC.Models.Project", b =>
                {
                    b.HasOne("DESAFIO.MVC.Models.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DESAFIO.MVC.Models.Starter", "Starter")
                        .WithMany()
                        .HasForeignKey("StarterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Starter");
                });

            modelBuilder.Entity("DESAFIO.MVC.Models.Starter", b =>
                {
                    b.HasOne("DESAFIO.MVC.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DESAFIO.MVC.Models.StartProgram", "StartProgram")
                        .WithMany()
                        .HasForeignKey("StartProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("StartProgram");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
